<?xml version="1.0"?>
<launch>


 

<!-- keyboard control 
  <node name="key_control" pkg="warehouse_simulation" type="key_control" respawn="false" output="screen"/>
-->
<!-- Localization  -->
  <!-- <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="log">
    <param name="maxRange" value="10"/>
    <param name="xmin" value="-12"/>
    <param name="ymin" value="-12"/>
    <param name="xmax" value="12"/>
    <param name="ymax" value="12"/>
    <param name="delta" value="0.05"/>
    <param name="particles" value="4"/>
    <param name="temporalUpdate" value="1.0"/>
    <param name="angularUpdate" value="0.3"/>
    <param name="linearUpdate" value="0.3"/>
    <param name="map_update_interval" value="2.0"/>
  </node> -->


<!-- Navigation -->
  <!-- <node pkg="move_base" type="move_base" respawn="true" name="move_base" output="screen"> --> -->

    <!-- <rosparam file="$(find warehouse_simulation)/param/move_base_params.yaml" command="load" />
    <rosparam file="$(find warehouse_simulation)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find warehouse_simulation)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />   
    <rosparam file="$(find warehouse_simulation)/param/local_costmap_params.yaml" command="load" />   
    <rosparam file="$(find warehouse_simulation)/param/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find warehouse_simulation)/param/base_local_planner_params.yaml" command="load" />algorithm -->
    <!-- <rosparam file="$(find warehouse_simulation)/param/navfn.yaml" command="load" /> --> -->

    <!-- <param name="global_costmap/global_frame" value="map"/>
    <param name="global_costmap/robot_base_frame" value="base_link"/>
    <param name="local_costmap/global_frame" value="odom"/>
    <param name="local_costmap/robot_base_frame" value="base_link"/>

  </node> -->
 

<!-- rviz-->
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find warehouse_simulation)/rviz/navigation.rviz" output="screen"/>

<!-- trajectory display-->
  <!-- <node pkg="hector_trajectory_server" type="hector_trajectory_server" name="trajectory_server" ns="pioneer" >
    <param name="/target_frame_name" value="map" />
    <param name="/source_frame_name" value="base_link" />
    <param name="/trajectory_update_rate" value="10.0" />
    <param name="/trajectory_publish_rate" value="10.0" />
  </node> -->
  <!-- Arguments -->
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="slam_methods" default="gmapping" doc="slam type [gmapping, cartographer, hector, karto, frontier_exploration]"/>
  <arg name="configuration_basename" default="turtlebot3_lds_2d.lua"/>
  <arg name="open_rviz" default="true"/>

  <!-- TurtleBot3 -->
  <include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch">
    <arg name="model" value="$(arg model)" />
  </include>

  <!-- SLAM: Gmapping, Cartographer, Hector, Karto, Frontier_exploration, RTAB-Map -->
  <!-- <include file="$(find turtlebot3_slam)/launch/turtlebot3_$(arg slam_methods).launch">
    <arg name="model" value="$(arg model)"/>
    <arg name="configuration_basename" value="$(arg configuration_basename)"/>
  </include> -->

  <!-- rviz -->
  <!-- <group if="$(arg open_rviz)"> 
    <node pkg="rviz" type="rviz" name="rviz" required="true"
          args="-d $(find turtlebot3_slam)/rviz/turtlebot3_$(arg slam_methods).rviz"/>
  </group> -->
</launch>